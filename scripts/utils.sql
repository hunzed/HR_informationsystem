-- Trigger to allow HR login
CREATE OR REPLACE TRIGGER ALLOW_HR_LOGIN
BEFORE INSERT OR UPDATE ON LOGIN
FOR EACH ROW
DECLARE
  POSITION_TYPE VARCHAR2(10);
BEGIN
  SELECT POSITION_TYPE INTO POSITION_TYPE
  FROM EMPLOYEE
  WHERE EMP_ID = :NEW.EMP_ID;
  
  IF POSITION_TYPE <> 'HR' THEN
    RAISE_APPLICATION_ERROR(-20001, 'Only employees with position type HR can have a login.');
  END IF;
END;
/

-- Function for login check and updating SESHINFO
CREATE OR REPLACE FUNCTION LOGIN_CHECK(USERNAME IN VARCHAR2, PASSWORD IN VARCHAR2) RETURN VARCHAR2 IS
  VALID_LOGIN VARCHAR2(10);
BEGIN
  SELECT USERNAME INTO VALID_LOGIN
  FROM LOGIN L
  WHERE L.USERNAME = USERNAME
  AND L.USERPASS = PASSWORD;

  IF VALID_LOGIN IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'Invalid login.');
  ELSE
    UPDATE LOGIN
    SET SESHINFO = (SELECT SYS_CONTEXT('USERENV', 'SESSION_USERID') FROM DUAL)
    WHERE USERNAME = VALID_LOGIN;

    RETURN VALID_LOGIN;
  END IF;
END;
/

DROP TRIGGER EMPLOYEE_AUDIT_TRIGGER;
-- Trigger for employee audit
CREATE OR REPLACE TRIGGER EMPLOYEE_AUDIT_TRIGGER
BEFORE INSERT OR DELETE OR UPDATE ON EMPLOYEE
FOR EACH ROW
DECLARE
  V_USERNAME VARCHAR2(20);
BEGIN
  SELECT USERNAME INTO V_USERNAME
  FROM LOGIN
  WHERE SESHINFO = SYS_CONTEXT('USERENV', 'SESSION_USERID');
  
  -- Insert transaction information into the TRANSACTIONS table
  INSERT INTO TRANSACTIONS (TRANSACTION_TIMESTAMP, USERNAME, EMP_ID, POSITION_TYPE)
  VALUES (SYSTIMESTAMP, V_USERNAME, :NEW.EMP_ID, 'HR');
  
END;
/


select SYS_CONTEXT('USERENV', 'SESSION_USERID') from dual;