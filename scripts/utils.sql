-- Trigger to allow HR login
CREATE OR REPLACE TRIGGER ALLOW_HR_LOGIN
BEFORE INSERT OR UPDATE ON LOGIN
FOR EACH ROW
DECLARE
  POSITION_TYPE VARCHAR2(10);
BEGIN
  SELECT POSITION_TYPE INTO POSITION_TYPE
  FROM EMPLOYEE
  WHERE EMP_ID = :NEW.EMP_ID;
  
  IF POSITION_TYPE <> 'HR' THEN
    RAISE_APPLICATION_ERROR(-20001, 'Only employees with position type HR can have a login.');
  END IF;
END;
/

-- Function for login check and updating SESHINFO
CREATE OR REPLACE FUNCTION LOGIN_CHECK(USERNAME IN VARCHAR2, PASSWORD IN VARCHAR2) RETURN VARCHAR2 IS
  VALID_LOGIN VARCHAR2(10);
BEGIN
  SELECT USERNAME INTO VALID_LOGIN
  FROM LOGIN L
  WHERE L.USERNAME = USERNAME
  AND L.USERPASS = PASSWORD;

  IF VALID_LOGIN IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'Invalid login.');
  ELSE
    UPDATE LOGIN
    SET SESHINFO = (SELECT SYS_CONTEXT('USERENV', 'SESSION_USERID') FROM DUAL)
    WHERE USERNAME = VALID_LOGIN;

    RETURN VALID_LOGIN;
  END IF;
END;
/

CREATE OR REPLACE FUNCTION GET_USERNAME RETURN VARCHAR2 IS
  USERNAME VARCHAR2(20);
BEGIN
  SELECT USERNAME INTO USERNAME
  FROM LOGIN
  WHERE SESHINFO = SYS_CONTEXT('USERENV', 'SESSION_USERID')
    AND ROWNUM = 1;

  RETURN USERNAME;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END;


DROP TRIGGER EMPLOYEE_AUDIT_TRIGGER;

CREATE OR REPLACE TRIGGER EMP_AUDIT_TRIGGER
AFTER INSERT OR UPDATE OR DELETE ON EMPLOYEE
FOR EACH ROW
DECLARE
  username VARCHAR2(100);
BEGIN
  username := GET_USERNAME();
  
  IF INSERTING OR UPDATING THEN
    INSERT INTO TRANSACTIONS (USERNAME, EMP_ID, POSITION_TYPE) VALUES (username, :NEW.EMP_ID, :NEW.POSITION_TYPE);
  ELSIF DELETING THEN
    INSERT INTO TRANSACTIONS (USERNAME, EMP_ID, POSITION_TYPE) VALUES (username, :OLD.EMP_ID, :OLD.POSITION_TYPE);
  END IF;
END;
